-- FUNCION praa verificar que el estacionamiento libre

USE `parqueadero`;
DROP FUNCTION IF EXISTS F_ES_LIBRE;
DELIMITER $$
CREATE FUNCTION F_ES_LIBRE(
    P_ID_ESTACIONAMIENTO INT
) RETURNS BIT
DETERMINISTIC
BEGIN
	DECLARE ESTADO_ACTUAL BIT; 
	SELECT ID_ESTADO INTO ESTADO_ACTUAL FROM ESTACIONAMIENTOS 
	WHERE ID_ESTACIONAMIENTO = P_ID_ESTACIONAMIENTO;
    RETURN (estado_actual = 0);
END$$
DELIMITER ;


-- TRIGGER para evitar la actualizaciom
DROP TRIGGER IF EXISTS T_VALIDAR_ESTADO;
DELIMITER $$
CREATE TRIGGER T_VALIDAR_ESTADO
BEFORE UPDATE ON ESTACIONAMIENTOS
FOR EACH ROW
BEGIN
	IF OLD.ID_ESTADO = 1 AND NEW.ID_ESTADO = 1 THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'EL ESTACIONAMIENTO ESTA OCUPADO';
    END IF;
END $$

DELIMITER ;



-- PROCEDIMIENTO ALM
USE `parqueadero`;
DROP procedure IF EXISTS `P_TICKET`;

DELIMITER $$
USE `parqueadero`$$
CREATE PROCEDURE `P_TICKET` (
IN P_PLACA_VEHICULO VARCHAR(10),
IN P_PROPIETARIO_VEHICULO VARCHAR (50),
IN P_ID_ESTACIONAMIENTO INT
)
BEGIN
	DECLARE ID_TICKET_NUEVO INT;

	IF F_ES_LIBRE(P_ID_ESTACIONAMIENTO) = 0 THEN
	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El estacionamiento esta ocupado';
	END IF;
    
    UPDATE ESTACIONAMIENTOS SET ID_ESTADO = 1 
    WHERE ID_ESTACIONAMIENTO = P_ID_ESTACIONAMIENTO;
    
    INSERT INTO TICKETS (HORA_ING) VALUES (NOW());
    SET ID_TICKET_NUEVO = LAST_INSERT_ID();
    
    INSERT INTO VEHICULOS (PLACA, PROPIETARIO, ID_TICKET, ID_ESTACIONAMIENTO) 
    VALUES (P_PLACA_VEHICULO, P_PROPIETARIO_VEHICULO, ID_TICKET_NUEVO, P_ID_ESTACIONAMIENTO);
END$$

DELIMITER ;
